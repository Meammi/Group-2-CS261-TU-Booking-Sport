'use client';

import { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import { MapPinIcon } from '@heroicons/react/24/solid';
import { renderToString } from 'react-dom/server';

// ‚úÖ ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ icon marker ‡∏Ç‡∏≠‡∏á Leaflet
const defaultIcon = L.icon({
  iconUrl: '/marker-icon.png',
  shadowUrl: '/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
});
L.Marker.prototype.options.icon = defaultIcon;

const heroIcon = L.divIcon({
  // ‡πÅ‡∏õ‡∏•‡∏á React Component (Heroicon) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô HTML string
  html: renderToString(
    // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ Tailwind CSS ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á icon ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    <MapPinIcon className="h-10 w-10 text-red-600" /> // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  ),
  className: '', // üëà ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  iconSize: [40, 40], // üëà ‡∏Ç‡∏ô‡∏≤‡∏î (h-10 w-10 = 40px)
  iconAnchor: [20, 40], // üëà ‡∏à‡∏∏‡∏î‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î (‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô, ‡∏õ‡∏•‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î)
});


// ‚úÖ Dynamic import (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Leaflet ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ù‡∏±‡πà‡∏á client)
const MapContainer = dynamic(() => import('react-leaflet').then(mod => mod.MapContainer), { ssr: false });
const TileLayer = dynamic(() => import('react-leaflet').then(mod => mod.TileLayer), { ssr: false });
const Marker = dynamic(() => import('react-leaflet').then(mod => mod.Marker), { ssr: false });
const Popup = dynamic(() => import('react-leaflet').then(mod => mod.Popup), { ssr: false });

interface BookingActionsProps {
  bookingId: number;
  status: string;
  isCurrent: boolean;
  locationName: string; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
}



export default function BookingActions({ bookingId, status, isCurrent, locationName }: BookingActionsProps) {
  const [modalState, setModalState] = useState<'closed' | 'confirm' | 'success' | 'error'>('closed');
  const [isCancelling, setIsCancelling] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [isMapOpen, setIsMapOpen] = useState(false);

  // ‚úÖ state ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å backend
  const [coords, setCoords] = useState<{ latitude: number; longitude: number } | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Map ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  useEffect(() => {
    if (!isMapOpen) return;

    const fetchLocation = async () => {
      try {
        setIsLoading(true);
        const res = await fetch(`http://localhost:8081/location/${locationName}`);
        if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ');

        const data = await res.json();
        setCoords({ latitude: data.latitude, longitude: data.longitude });
      } catch (err: any) {
        console.error(err);
        setErrorMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î');
      } finally {
        setIsLoading(false);
      }
    };

    fetchLocation();
  }, [isMapOpen, locationName]);

  const handleOpenConfirmModal = () => setModalState('confirm');
  const handleCloseModal = () => setModalState('closed');
  const handleOpenMap = () => setIsMapOpen(true);
  const handleCloseMap = () => setIsMapOpen(false);

  return (
    <>
      {/* ‡∏õ‡∏∏‡πà‡∏° Cancel + MAP */}
      <div className="mt-6 grid grid-cols-2 gap-4">
        <button
          onClick={handleOpenConfirmModal}
          className="rounded-md bg-red-600 py-2 text-sm font-semibold text-white transition hover:bg-red-700 disabled:bg-red-300 disabled:cursor-not-allowed"
          disabled={!isCurrent}
        >
          Cancel
        </button>

        <button
          onClick={handleOpenMap}
          className="flex items-center justify-center gap-2 rounded-md bg-green-600 py-2 text-sm font-semibold text-white transition hover:bg-green-700"
        >
          <MapPinIcon className="h-4 w-4" />
          <span>MAP</span>
        </button>
      </div>

      {/* ‚úÖ Modal Map */}
      {isMapOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="relative w-[90%] max-w-md h-[80vh] bg-white rounded-2xl overflow-hidden shadow-lg">
            <button
              onClick={handleCloseMap}
              className="absolute top-3 right-3 z-[1000] bg-gray-800 text-white rounded-full p-2 hover:bg-gray-700 transition"
            >
              ‚úï
            </button>

            {isLoading ? (
              <div className="flex items-center justify-center h-full text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà...</div>
            ) : coords ? (
              <MapContainer
                center={[coords.latitude, coords.longitude]}
                zoom={16}
                className="h-full w-full"
              >
                <TileLayer
                  attribution='&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors'
                  url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                />
                <Marker
                  position={[coords.latitude, coords.longitude]}
                  icon={heroIcon} // üëà ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
                >
                  <Popup>{locationName}</Popup>
                </Marker>
              </MapContainer>

            ) : (
              <div className="flex items-center justify-center h-full text-red-600">
                {errorMessage || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î'}
              </div>
            )}
          </div>
        </div>
      )}

      {/* modal ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å booking (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢) */}
      {modalState !== 'closed' && (
        <div className="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-50">
          {/* ... ‡∏™‡πà‡∏ß‡∏ô confirm/success/error modal ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ... */}
        </div>
      )}
    </>
  );
}